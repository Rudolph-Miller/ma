 <!DOCTYPE html>
<html
  lang="ja"
  data-avail-langs="ja en"

  data-page="entry"
  data-admin-domain="http://blog.hatena.ne.jp"
  data-static-domain="http://hatenablog.com"
  data-blog="8arrow.hatenablog.com"
  data-blogs-uri-base="http://blog.8arrow.org"
  data-globalheader-color="b"
  data-globalheader-type="pc"
  data-author="nitro_idiot"
  data-version="cb3376f552692eef52655312928aaadd"
  data-blog-comments-top-is-new=""
  data-device="pc"

  

  data-brand="hatenablog"


  data-has-touch-view="1"
  

  itemscope
   itemtype="http://schema.org/Article"

  >
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    
    
    

    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=7; IE=9; IE=10; IE=11" />
    <title>誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来 - 八発白中</title>

    

    
      <link rel="canonical" href="http://blog.8arrow.org/entry/2014/02/04/041417"/>
    

    <meta itemprop="name" content="誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来 - 八発白中"/>
    
      <meta itemprop="image" content="http://ecx.images-amazon.com/images/I/414qGlNpcHL._SL160_.jpg"/>
    

    <meta property="og:title" content="誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来 - 八発白中"/>
    <meta property="og:type" content="article"/>
    <meta property="og:url" content="http://blog.8arrow.org/entry/2014/02/04/041417"/>
    
      <meta property="og:image" content="http://ecx.images-amazon.com/images/I/414qGlNpcHL._SL160_.jpg"/>
    
      <meta property="og:description" content="Lispと言えば関数型言語という印象を持つ人が多いようです。 まあ正直に言うと、Common Lispに関して言えば違うんですけどね。Common Lispは効率のためと言えばループも代入も使いまくるし、構造体もクラスもある。実際書かれたコードも関数型プログラミングとは程遠いことも多くて、たとえば僕が作ったClackのコードを見ればオブジェクト指向言語だって言っても信じると思います。 僕自身、繰り返しをわざわざ再帰で書くよりもloop使うことが多いです。最近loopに頼りすぎてて良くないなーと思うことが多く、Common Lispでも性能が重要でないところは関数型っぽく書く癖をつけないとなー、…" />
    <meta property="og:site_name" content="http://blog.8arrow.org/"/>
      <meta property="article:published_time" content="1391454857" />
    <meta name="twitter:card" content="summary" />      <meta name="twitter:app:name:iphone" content="はてなブログアプリ" />
      <meta name="twitter:app:id:iphone" content="583299321" />
      <meta name="twitter:app:url:iphone" content="hatenablog:///open?uri=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F02%2F04%2F041417" />      <meta name="twitter:site" content="@nitro_idiot" />
      <meta name="description" content="Lispと言えば関数型言語という印象を持つ人が多いようです。 まあ正直に言うと、Common Lispに関して言えば違うんですけどね。Common Lispは効率のためと言えばループも代入も使いまくるし、構造体もクラスもある。実際書かれたコードも関数型プログラミングとは程遠いことも多くて、たとえば僕が作ったClackの…">
    
<script type="text/javascript">
// <!--

if (~navigator.userAgent.indexOf('Mac OS X')) {
  document.write('<style type="text/css">html, body { font-family: \x27Helvetica\x27, \x27Arial\x27, \x27ヒラギノ角ゴ Pro W3\x27, \x27Hiragino Kaku Gothic Pro\x27, sans-serif; } </style>');
} else {
  document.write('<style type="text/css">html, body { font-family: \x27Helvetica\x27, \x27Arial\x27, \x27メイリオ\x27, \x27Meiryo\x27, \x27MS PGothic\x27, sans-serif; } </style>');
}

// -->
</script>

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<!--[if IE]>
<script type="text/javascript" src="/js/vendor/excanvas/excanvas.js"></script>
<![endif]-->


    <link rel="shortcut icon" href="http://hatenablog.com/images/favicon.ico">
    <link rel="alternate" type="application/atom+xml" title="Atom" href="http://blog.8arrow.org/feed"/>
    <link rel="alternate" type="application/rss+xml" title="RSS2.0" href="http://blog.8arrow.org/rss"/>
    <link rel="author" href="http://www.hatena.ne.jp/nitro_idiot/">

      <link rel="stylesheet" type="text/css" href="http://hatenablog.com/.shared.css:cb3376f552692eef52655312928aaadd:/css/theme/base.css,/css/prettify.css,/css/globalheader.css?version=cb3376f552692eef52655312928aaadd"/>
      <link rel="stylesheet" type="text/css" href="http://hatenablog.com/-/blog_style/11696248318755958219/2975e7304776ac8a3369afb4a91fb32250c7e04b"/>    <script>    </script>

    
    <style>
      div#google_afc_user,
      div#google_afc_user_container,
      div.google_afc_image,
      div.google_afc_blocklink {
          display: block !important;
      }
    </style>

    
  </head>

  <body class="page-entry     ">
    <!-- Google Universal Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-29716941-6', 'auto', {'name': 'HatenaBlogTracker'});
  ga('HatenaBlogTracker.require', 'displayfeatures');
  ga('HatenaBlogTracker.send', 'pageview');

</script>
<!-- End Google Universal Analytics -->

    
    <div id="header-container">
     <div id="sp-suggest" style="display: none;"><a id="sp-suggest-link" href="#">スマートフォン用の表示で見る</a></div>
    </div>

    <div class="select_star_button_container" style="display: none;">
      <img src="http://hatenablog.com/images/theme/hatena-star-quote-box.png?version=cb3376f552692eef52655312928aaadd" title="引用スターをつける" class="select_star_button" />
      <img src="http://hatenablog.com/images/theme/hatena-star-quote-star.png?version=cb3376f552692eef52655312928aaadd" title="引用スターをつける" class="select_star_button select_star_star">
    </div>

    <div class="message-box" id="select-star-message-box" style="display: none;">
      スターをつけました
    </div>

    <div id="globalheader-container" >
  <iframe id="globalheader" height="37" frameborder="0" allowTransparency="true"></iframe>
</div>


    <div id="container">
      <div id="container-inner">
        <header id="blog-title" data-brand="hatenablog">
  <div id="blog-title-inner" >
    <h1 id="title"><a href="http://blog.8arrow.org/">八発白中</a></h1>
    
      <h2 id="blog-description">はてなブログに引越しました。</h2>
    
  </div>
</header>

        
        




<div id="content" class="hfeed"
  
  >
  <div id="content-inner">
    <div id="wrapper">
      <div id="main">
        <div id="main-inner">
          
            
            <!-- google_ad_section_start -->
            <!-- rakuten_ad_target_begin -->
            
              
                <article class="entry hentry js-entry-article date-first autopagerize_page_element chars-6000 words-600 mode-markdown entry-odd" id="entry-12921228815717793585" data-keyword-campaign="" data-uuid="12921228815717793585">
  <div class="entry-inner">
    <header class="entry-header">
      <div class="date first">
        <a href="http://blog.8arrow.org/entries/2014/02/04" rel="nofollow">
          <time pubdate datetime="2014-02-03T19:14:17Z" title="2014-02-03T19:14:17Z">
            <span class="date-year">2014</span><span class="hyphen">-</span><span class="date-month">02</span><span class="hyphen">-</span><span class="date-day">04</span>
          </time>
        </a>
      </div>
      <h1 class="entry-title">
        <a href="http://blog.8arrow.org/entry/2014/02/04/041417" class="entry-title-link bookmark">誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来</a>
      </h1>
      
      <div class="categories no-categories">
        
      </div>
      
    </header>
    <div class="entry-content">

      
        <p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Lisp">Lisp</a>と言えば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC">関数型言語</a>という印象を持つ人が多いようです。</p>

<p>まあ正直に言うと、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>に関して言えば違うんですけどね。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>は効率のためと言えばループも代入も使いまくるし、構造体もクラスもある。実際書かれたコードも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>とは程遠いことも多くて、たとえば僕が作った<a href="http://clacklisp.org">Clack</a>のコードを見れば<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE%B8%C0%B8%EC">オブジェクト指向言語</a>だって言っても信じると思います。</p>

<p>僕自身、繰り返しをわざわざ<a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2">再帰</a>で書くよりも<code>loop</code>使うことが多いです。最近<code>loop</code>に頼りすぎてて良くないなーと思うことが多く、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>でも性能が重要でないところは関数型っぽく書く癖をつけないとなー、と思っていろいろ考えています。なんでも<code>loop</code>だと可読性が悪い。</p>

<p>特に、僕が今作っている<a href="http://cl21.org">Common Lisp方言の「CL21」</a>では<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数プログラミング</a>をもっとしやすくする機能を入れたいと思っています。</p>

<p>そういうわけで、最近は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の方法について調べてCL21に取り込むことをしています。</p>

<p>だいたいまとまったので、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>とCL21で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>をする<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル</a>みたいなものを午前四時のローテンションで書いてみました。</p>

<p>以下の2章立てです。</p>

<ul>
<li><strong><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a></strong>での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の<strong>現状</strong></li>
<li><strong>CL21</strong>での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の<strong>未来</strong></li>
</ul>


<p>今読み返してみると、しれっと<a class="keyword" href="http://d.hatena.ne.jp/keyword/Scheme">Scheme</a>知ってる前提だったりして、これ誰向けだよ、みたいな感じですが、まあご容赦ください。というかCL21のほうが本題だったりするので入門っぽい話を読みたくなかったら2章までスクロールしてください。</p>

<h2><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の現状</h2>

<h3>関数</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>で関数を定義するには<code>defun</code>を使います。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defun</span> 関数名 <span class="synSpecial">(</span>パラメータ*<span class="synSpecial">)</span>
  <span class="synConstant">&quot;ドキュメント文字列 (任意)&quot;</span>
  本体*<span class="synSpecial">)</span>
</pre>


<p>例えば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Scheme">Scheme</a>で良く使われる<code>iota</code>は以下のように定義できます。<code>iota</code>は<code>start</code>から始まる<code>n</code>個のリストを返します。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defun</span> iota <span class="synSpecial">(</span>n <span class="synType">&amp;optional</span> <span class="synSpecial">(</span>start <span class="synConstant">0</span><span class="synSpecial">))</span>
  <span class="synSpecial">(</span><span class="synStatement">if</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
      <span class="synStatement">nil</span>
      <span class="synSpecial">(</span><span class="synStatement">cons</span> start <span class="synSpecial">(</span>iota <span class="synSpecial">(</span><span class="synStatement">-</span> n <span class="synConstant">1</span><span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synStatement">1+</span> start<span class="synSpecial">)))))</span>

<span class="synSpecial">(</span>iota <span class="synConstant">10</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; (0 1 2 3 4 5 6 7 8 9)</span>

<span class="synSpecial">(</span>iota <span class="synConstant">5</span> <span class="synConstant">3</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; (3 4 5 6 7)</span>
</pre>


<h3>無名関数</h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>で無名関数を作るには<code>lambda</code>を使います。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
  <span class="synSpecial">(</span><span class="synStatement">and</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
       <span class="synSpecial">(</span><span class="synStatement">integerp</span> n<span class="synSpecial">)))</span>
<span class="synComment">;=&gt; #&lt;Anonymous Function #x302002ECCE3F&gt;</span>
</pre>


<p>無名関数を単に呼び出すときは、通常の関数の位置に<code>lambda</code>フォームを書けばいいだけです。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">((</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
   <span class="synSpecial">(</span><span class="synStatement">and</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
        <span class="synSpecial">(</span><span class="synStatement">integerp</span> n<span class="synSpecial">)))</span>
 <span class="synConstant">3</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>

<span class="synSpecial">((</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
   <span class="synSpecial">(</span><span class="synStatement">and</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
        <span class="synSpecial">(</span><span class="synStatement">integerp</span> n<span class="synSpecial">)))</span>
 <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; T</span>

<span class="synSpecial">((</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
   <span class="synSpecial">(</span><span class="synStatement">and</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
        <span class="synSpecial">(</span><span class="synStatement">integerp</span> n<span class="synSpecial">)))</span>
 <span class="synConstant">0.0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a></h3>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>とは、関数を引数として受け取ったり、返り値として(無名)関数を返すような関数のことです。</p>

<p>例えば、多くの言語では<code>map</code>という関数がありますね。関数とリストを受け取り、リストのそれぞれの要素について関数を適用するようなものです。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>ではこのような機能は<code>mapcar</code>と呼ばれています。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">mapcar</span> <span class="synType">#'1+</span> <span class="synSpecial">'(</span>1 2 3 4 5<span class="synSpecial">))</span>
<span class="synComment">;=&gt; (2 3 4 5 6)</span>
</pre>


<p><code>#'</code>という記号は他の言語では特殊なので説明が必要ですね。</p>

<p>まず<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>では関数と変数の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6">名前空間</a>が分かれています (<a class="keyword" href="http://d.hatena.ne.jp/keyword/LISP">LISP</a>-2という分類)。たとえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>には関数<code>list</code>がありますが、同時に同じ名前の<code>list</code>という変数を定義して使うこともできます。</p>

<p>このとき気をつけなければいけないのは、単に<code>list</code>と書いたときに、それが変数なのか関数なのかを区別する必要があるということです。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>で通常<code>list</code>を値として評価した場合、変数として扱われます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defvar</span> <span class="synStatement">list</span> <span class="synSpecial">'(</span>1 2 3<span class="synSpecial">))</span>

<span class="synStatement">list</span>
<span class="synComment">;=&gt; (1 2 3)</span>
</pre>


<p><code>list</code>を関数として扱いたいときは、<code>#'</code>をつけます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synType">#'list</span>
<span class="synComment">;=&gt; #&lt;Compiled-function LIST #x3000000B4D6F&gt;</span>
</pre>


<p>上の<code>mapcar</code>では<code>1+</code>という変数を渡しているのではなく、関数<code>1+</code>を渡したいので、<code>#'</code>が必要なのです。</p>

<p>また、<code>reduce</code>もよく使われる<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>です。<code>reduce</code>はリストの先頭から渡された関数に適用し、さらにその返り値とリストの次の値を適用することを繰り返して結果を返す関数です。<code>reduce</code>は他の言語では<code>fold</code>とか<code>inject</code>と呼ばれることもあります。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synComment">;; (+ (+ 1 2) 3) と同じ</span>
<span class="synSpecial">(</span><span class="synStatement">reduce</span> <span class="synType">#'+</span> <span class="synSpecial">'(</span>1 2 3<span class="synSpecial">))</span>
<span class="synComment">;=&gt; 7</span>
</pre>


<h3><a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>の使い道</h3>

<p>上述した<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>の便利なところは、その汎用性です。引数として渡す関数によってさまざまな用途に使えます。小さく汎用的なパーツを組み合わせて段々と大きくしていく手法は<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%E0%A5%A2%A5%C3%A5%D7">ボトムアップ</a>プログラミングとして知られていますね。</p>

<p>たとえば、<code>reduce</code>を使うと以下のような関数が簡単に定義できます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defun</span> sum <span class="synSpecial">(</span><span class="synStatement">list</span><span class="synSpecial">)</span>
  <span class="synConstant">&quot;数字のリストを受け取り、その合計値を返す&quot;</span>
  <span class="synSpecial">(</span><span class="synStatement">reduce</span> <span class="synType">#'+</span> <span class="synStatement">list</span><span class="synSpecial">))</span>

<span class="synSpecial">(</span><span class="synStatement">defun</span> factorial <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
  <span class="synConstant">&quot;数字を一つ受け取り、その階乗を返す。 n! = 1 * 2 * 3 * ... * n&quot;</span>
  <span class="synSpecial">(</span><span class="synStatement">reduce</span> <span class="synType">#'*</span> <span class="synSpecial">(</span>iota n <span class="synConstant">1</span><span class="synSpecial">)))</span>
</pre>


<p><code>sum</code>は数字のリストを受け取り、その合計値を返します。<code>factorial</code>は数字を一つ受け取り、その階乗を返します。</p>

<p><code>mapcar</code>では<code>zip</code>という関数が定義できます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defun</span> zip <span class="synSpecial">(</span><span class="synType">&amp;rest</span> lists<span class="synSpecial">)</span>
  <span class="synSpecial">(</span><span class="synStatement">apply</span> <span class="synType">#'mapcar</span> <span class="synType">#'list</span> lists<span class="synSpecial">))</span>
</pre>


<p><code>apply</code>は一番最後の引数をリストとして扱って関数を呼び出す方法です。</p>

<p><code>zip</code>は複数のリストを受け取り、その要素一つ一つをまとめあげる関数です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span>zip <span class="synSpecial">'(</span>1 2 3<span class="synSpecial">)</span> <span class="synSpecial">'(</span>a b c<span class="synSpecial">)</span> <span class="synSpecial">'(</span>松 竹 梅<span class="synSpecial">))</span>
<span class="synComment">;=&gt; ((1 A 松) (2 B 竹) (3 C 梅))</span>
</pre>


<h3>関数合成 (compose)</h3>

<p>さて、<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>を使って組み合わせることで多くの関数を定義することを説明しました。この章ではさらに「関数合成」というテクニックを紹介します。</p>

<p>たとえば、関数<code>g</code>の返り値を関数<code>f</code>に渡したいとき、<code>(f (g x))</code> のように書けばいいのはわかりますね。</p>

<p>この処理を<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%E2%B3%AC%B4%D8%BF%F4">高階関数</a>に渡すには、無名関数を作るのが最もナイーブな方法です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>x<span class="synSpecial">)</span>
  <span class="synSpecial">(</span>f <span class="synSpecial">(</span>g x<span class="synSpecial">)))</span>
</pre>


<p>しかし、組み合わせる関数がもっと多くなったときはどうでしょうか。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>x<span class="synSpecial">)</span>
  <span class="synSpecial">(</span>f <span class="synSpecial">(</span>g <span class="synSpecial">(</span>h <span class="synSpecial">(</span>i <span class="synSpecial">(</span>j <span class="synSpecial">(</span>k x<span class="synSpecial">)))))))</span>
</pre>


<p>長くなりますしだんだんと読みづらくなってしまいます。</p>

<p>このようなとき便利なのが「関数合成」です。ここでは関数<code>compose</code>を使います。関数<code>compose</code>は<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>の仕様に含まれないため、Alexandriaのようなユーティリティライブラリを使うか、もしくは以下のように<code>reduce</code>で簡単に定義できます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defun</span> compose <span class="synSpecial">(</span>fn <span class="synType">&amp;rest</span> functions<span class="synSpecial">)</span>
  <span class="synSpecial">(</span><span class="synStatement">reduce</span> <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>f g<span class="synSpecial">)</span>
            <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span><span class="synType">&amp;rest</span> args<span class="synSpecial">)</span>
              <span class="synSpecial">(</span><span class="synStatement">funcall</span> f <span class="synSpecial">(</span><span class="synStatement">apply</span> g args<span class="synSpecial">))))</span>
          functions
          <span class="synType">:initial-value</span> fn<span class="synSpecial">))</span>
</pre>


<p><code>compose</code>を使うとさき先ほどの例は以下のようになります。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span>compose <span class="synType">#'f</span> <span class="synType">#'g</span><span class="synSpecial">)</span>
</pre>


<p>関数を引数で渡すだけなので括弧も少なく済みますね。</p>

<p>例として、リストの各要素の <code>sin(n + 1)</code> をリストとして返す処理は以下のように書けます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">mapcar</span> <span class="synSpecial">(</span>compose <span class="synType">#'sin</span> <span class="synType">#'1+</span><span class="synSpecial">)</span> <span class="synSpecial">'(</span>1 2 3 4 5<span class="synSpecial">))</span>
<span class="synComment">;=&gt; (0.9092974 0.14112 -0.7568025 -0.9589243 -0.2794155)</span>
</pre>


<p><code>mapcar</code>を2回使っても同じ結果が出ますが、リストを2回走査する必要があるし、ループのたびにリストを新しく作るためメモリ消費面でも良いコードではありません。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synComment">;; 良くない</span>
<span class="synSpecial">(</span><span class="synStatement">mapcar</span> <span class="synType">#'sin</span>
        <span class="synSpecial">(</span><span class="synStatement">mapcar</span> <span class="synType">#'1+</span> <span class="synSpecial">'(</span>1 2 3 4 5<span class="synSpecial">)))</span>
</pre>


<h3>conjoin &amp; disjoin</h3>

<p>関数合成の例として、他にも<code>conjoin</code>と<code>disjoin</code>という関数もよく使われます。</p>

<p>これらは各関数の返り値の真偽によって関数を複数実行する機能です。</p>

<p>たとえば、「ゼロかつ整数である」という条件の処理は以下のように書けます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span>
  <span class="synSpecial">(</span><span class="synStatement">and</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)</span>
       <span class="synSpecial">(</span><span class="synStatement">integerp</span> n<span class="synSpecial">)))</span>
</pre>


<p>この処理も<code>compose</code>のときのように、適用する関数が多い場合に煩雑になってしまいます。</p>

<p>このような処理を関数合成で解決するのが<code>conjoin</code>です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">import</span> <span class="synSpecial">'</span><span class="synIdentifier">alexandria:conjoin</span><span class="synSpecial">)</span>

<span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>conjoin <span class="synType">#'zerop</span> <span class="synType">#'integerp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; T</span>

<span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>conjoin <span class="synType">#'zerop</span> <span class="synType">#'integerp</span><span class="synSpecial">)</span> <span class="synConstant">0.0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<p><code>conjoin</code>は<code>and</code>で関数を繋げた無名関数を返します。一方で<code>disjoin</code>は<code>or</code>で関数を繋げます。</p>

<p>たとえば<code>(disjoin #'plusp #'minusp)</code>はプラスかマイナスの数値なら真を返します。つまりゼロではないという条件になります。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>disjoin <span class="synType">#'plusp</span> <span class="synType">#'minusp</span><span class="synSpecial">)</span> <span class="synConstant">100</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; T</span>

<span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>disjoin <span class="synType">#'plusp</span> <span class="synType">#'minusp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<p>ちなみに余談ですが、ゼロかどうかは<code>zerop</code>で判断できるので、その返り値を反転させて返すほうが賢い実装ですね。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span><span class="synStatement">lambda</span> <span class="synSpecial">(</span>n<span class="synSpecial">)</span> <span class="synSpecial">(</span><span class="synStatement">not</span> <span class="synSpecial">(</span><span class="synStatement">zerop</span> n<span class="synSpecial">)))</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<p>このような<code>not</code>を加えるだけの呼び出しもよく使われるので、単に返り値の真偽を反転させる関数を返す関数<code>complement</code>というものもあります。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span><span class="synStatement">complement</span> <span class="synType">#'zerop</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<h2>CL21での<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の未来</h2>

<p>さて、ここからが実は本題です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>で<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>の機能をひと通り紹介しました。<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>でも十分に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>ができますね。</p>

<p>しかし、僕が作っている新しい<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>方言の「CL21」では、より<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>をしやすいようにするつもりです。たとえば、<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>には無い<code>compose</code>や<code>conjoin</code>、<code>disjoin</code>、<code>curry</code>、<code>rcurry</code>を含めました。</p>

<p>それだけでなく、さらにそれを簡易に使えるリーダマクロもあります。<code>#'</code>です。</p>

<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>で<code>#'</code>はシンボルか、<code>lambda</code>式にしか使えなかったのですが、CL21ではこのリーダマクロに機能を追加したもので上書きしています。</p>

<p>実際のコードを見せたほうが早いかもしれません。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>conjoin <span class="synType">#'zerop</span> <span class="synType">#'integerp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; T</span>

<span class="synComment">;; ↑と同じ</span>
<span class="synSpecial">(</span><span class="synStatement">funcall</span> #<span class="synSpecial">'(</span><span class="synStatement">and</span> <span class="synStatement">zerop</span> <span class="synStatement">integerp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; T</span>


<span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span>disjoin <span class="synType">#'plusp</span> <span class="synType">#'minusp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>

<span class="synComment">;; ↑と同じ</span>
<span class="synSpecial">(</span><span class="synStatement">funcall</span> #<span class="synSpecial">'(</span><span class="synStatement">or</span> <span class="synStatement">plusp</span> <span class="synStatement">minusp</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<p><code>#'(and zerop integerp)</code> と書くと <code>conjoin</code> に展開され、<code>#'(or zerop integerp)</code> と書くと <code>disjoin</code> に展開されます。</p>

<p>これは単に短いだけでなく、<code>and</code>と<code>or</code>という一般的な単語を使うことで直感的です。</p>

<p>さらに、もう想像つくと思いますが、<code>complement</code>に対応するものは<code>not</code>です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">funcall</span> <span class="synSpecial">(</span><span class="synStatement">complement</span> <span class="synType">#'zerop</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>

<span class="synComment">;; ↑と同じ</span>
<span class="synSpecial">(</span><span class="synStatement">funcall</span> #<span class="synSpecial">'(</span><span class="synStatement">not</span> <span class="synStatement">zerop</span><span class="synSpecial">)</span> <span class="synConstant">0</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; NIL</span>
</pre>


<p>もちろん、これらは組み合わせて使うこともできます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">remove-if-not</span> #<span class="synSpecial">'(</span><span class="synStatement">and</span> <span class="synStatement">integerp</span>
                      <span class="synSpecial">(</span><span class="synStatement">or</span> <span class="synSpecial">(</span><span class="synStatement">not</span> <span class="synStatement">evenp</span><span class="synSpecial">)</span>
                          <span class="synStatement">zerop</span><span class="synSpecial">))</span>
               <span class="synSpecial">(</span>iota <span class="synConstant">11</span><span class="synSpecial">))</span>
<span class="synComment">;=&gt; (0 1 3 5 7 9)</span>
</pre>


<p><code>compose</code>だけはそのまま<code>compose</code>を使います。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">mapcar</span> <span class="synSpecial">(</span>compose <span class="synType">#'sin</span> <span class="synType">#'1+</span><span class="synSpecial">)</span> <span class="synSpecial">'(</span>1 2 3 4 5<span class="synSpecial">))</span>
<span class="synComment">;=&gt; (0.9092974 0.14112 -0.7568025 -0.9589243 -0.2794155)</span>

<span class="synComment">;; ↑と同じ</span>
<span class="synSpecial">(</span><span class="synStatement">mapcar</span> #<span class="synSpecial">'(</span>compose <span class="synStatement">sin</span> <span class="synStatement">1+</span><span class="synSpecial">)</span> <span class="synSpecial">'(</span>1 2 3 4 5<span class="synSpecial">))</span>
<span class="synComment">;=&gt; (0.9092974 0.14112 -0.7568025 -0.9589243 -0.2794155)</span>
</pre>


<p>あまりルールを増やすのは良くないとは思いますが、こういう地味に省略されててかつ見た目もわかりやすいという機能はどんどん取り入れていきたいですね。</p>

<p>ちなみにCL21は<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a>で絶賛開発中で、意見募集や議論はIssuesで行っています。興味があればぜひご参加ください。</p>

<ul>
<li><a href="https://github.com/fukamachi/cl21/issues">https://github.com/fukamachi/cl21/issues</a></li>
</ul>


<h2>まとめ</h2>

<ul>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>でも<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>ができる</li>
<li>CL21ではもっと簡単に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">関数型プログラミング</a>ができる</li>
</ul>


<p><div class="hatena-asin-detail"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/happatsu-22/"><img src="http://ecx.images-amazon.com/images/I/414qGlNpcHL._SL160_.jpg" class="hatena-asin-detail-image" alt="JavaScriptで学ぶ関数型プログラミング" title="JavaScriptで学ぶ関数型プログラミング"></a><div class="hatena-asin-detail-info"><p class="hatena-asin-detail-title"><a href="http://www.amazon.co.jp/exec/obidos/ASIN/4873116600/happatsu-22/">JavaScriptで学ぶ関数型プログラミング</a></p><ul><li><span class="hatena-asin-detail-label">作者:</span> Michael Fogus,和田祐一郎</li><li><span class="hatena-asin-detail-label">出版社/メーカー:</span> <a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%E9%A5%A4%A5%EA%A1%BC%A5%B8%A5%E3%A5%D1%A5%F3">オライリージャパン</a></li><li><span class="hatena-asin-detail-label">発売日:</span> 2014/01/18</li><li><span class="hatena-asin-detail-label">メディア:</span> 単行本（ソフトカバー）</li><li><a href="http://d.hatena.ne.jp/asin/4873116600/happatsu-22" target="_blank">この商品を含むブログ (2件) を見る</a></li></ul></div><div class="hatena-asin-detail-foot"></div></div></p>

      
    </div>
    <footer class="entry-footer">
      <p class="entry-footer-section">
        <span class="author vcard"><span class="fn" data-load-nickname="1" data-user-name="nitro_idiot">nitro_idiot</span></span>
        <span class="entry-footer-time"><a href="http://blog.8arrow.org/entry/2014/02/04/041417"><time data-relative datetime="2014-02-03T19:14:17Z" title="2014-02-03T19:14:17Z" pubdate class="updated">2014-02-04 04:14</time></a></span>
      </p>
      <div class="hatena-star-container">
      </div>
      

      <div class="customized-footer">
        <div class="social-buttons">
  
  
    <a href="http://b.hatena.ne.jp/entry/http://blog.8arrow.org/entry/2014/02/04/041417" class="hatena-bookmark-button" data-hatena-bookmark-layout="standard-balloon" data-hatena-bookmark-lang="ja" title="この記事をはてなブックマークに追加"><img src="http://b.st-hatena.com/images/entry-button/button-only.gif" alt="この記事をはてなブックマークに追加" width="20" height="20" style="border: none;" /></a>
  
  
    <iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F02%2F04%2F041417&amp;layout=button_count&amp;show_faces=false&amp;width=130&amp;action=like&amp;height=21" class="facebook-like-button" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:130px; height:21px;" allowTransparency="true"></iframe>
  
  
    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F02%2F04%2F041417&text=%E8%AA%B0%E5%90%91%E3%81%91%E3%81%8B%E3%82%8F%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84Common%20Lisp%E3%81%A7%E3%81%AE%E9%96%A2%E6%95%B0%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80%E3%81%A8%E3%81%9D%E3%81%AE%E6%9C%AA%E6%9D%A5%20-%20%E5%85%AB%E7%99%BA%E7%99%BD%E4%B8%AD&lang=ja" class="twitter-share-button" style="width:130px; height:20px;"></iframe>
  
  
    <div class="g-plusone" data-size="medium" data-href="http://blog.8arrow.org/entry/2014/02/04/041417"></div>
  
  
  
  
</div>


          

          

          
            <div class="entry-footer-html">    <!-- X:S ZenBackWidget --><script type="text/javascript">document.write(unescape("%3Cscript")+" src='http://widget.zenback.jp/?base_uri=http%3A//blog.8arrow.org&nsid=116589683810521419%3A%3A116589712801563571&rand="+Math.ceil((new Date()*1)*Math.random())+"' type='text/javascript'"+unescape("%3E%3C/script%3E"));</script><!-- X:E ZenBackWidget --></div>
          
        
      </div>

      <div class="comment-box">
        
        <ul class="comment">
          
        </ul>
        
          <a class="leave-comment-title">コメントを書く</a>
        
      </div>
    </footer>
  </div>
</article>

                

                
                  
                  
                  <div class="permalink pager">
                    
                      
                      <span class="pager-prev">
                        <a href="http://blog.8arrow.org/entry/2014/03/02/172920" rel="prev">
                          <span class="pager-arrow">« </span>
                          株式会社はてなを退職しました
                        </a>
                      </span>
                    
                    
                      
                      <span class="pager-next">
                        <a href="http://blog.8arrow.org/entry/2014/01/24/075236" rel="next">
                          Lisp Meet Up #13 に参加しました
                          <span class="pager-arrow"> »</span>
                        </a>
                      </span>
                    
                  </div>
                

              
            
            <!-- rakuten_ad_target_end -->
            <!-- google_ad_section_end -->

            
          
        </div>
      </div>

      
      <aside id="box1">
        <div id="box1-inner">
        </div>
      </aside>

    </div><!-- #wrapper -->

    <aside id="box2">
  <div id="box2-inner">
    
      

<div class="hatena-module hatena-module-profile">
  <div class="hatena-module-title">
    About Me
  </div>
  <div class="hatena-module-body">
    
    <a href="http://blog.8arrow.org/about">
      <img src="http://cdn1.www.st-hatena.com/users/ni/nitro_idiot/profile.gif"
      alt="id:nitro_idiot" class="profile-icon" />
    </a>
    

    
    <span class="id">
      <a href="http://blog.8arrow.org/about"><span data-load-nickname="1" data-user-name="nitro_idiot">id:nitro_idiot</span></a>
      
  
    
      
      <a href="http://blog.hatena.ne.jp/guide/pro" title="はてなブログPro"><i class="icon-pro" /></i></a>
    
  


    </span>
    

    

    
    <div class="hatena-follow-button-box btn-subscribe">
      <a href="#" class="hatena-follow-button">
        <span class="subscribing">
          <span class="foreground">購読中です</span>
          <span class="background">読者をやめる</span>
        </span>
        <span class="unsubscribing">
          <span class="foreground">読者になる</span>
          <span class="background">読者になる</span>
        </span>
      </a>
      <div class="subscription-count-box">
        <span class="subscription-balloon">
        </span>
        <span class="subscription-count">
        </span>
      </div>
    </div>
    

    

    

    
  </div>
</div>

    
      

<div class="hatena-module hatena-module-html">
  
  <div class="hatena-module-body">
    <style type="text/css">
.my-service-icons {
  padding-left: 0;
  text-align: center;
}
.my-service-icons li {
  display: inline-block;
  margin: 0 8px;
}
</style>
<ul class="my-service-icons" >
  <li>
    <a href="https://github.com/fukamachi" target="_blank"><img src="http://8arrow.org/images/github-icon.png" alt="GitHub" title="GitHub" width="40px" height="40px" /></a>
  </li>
  <li>
    <a href="http://nitro-idiot.hatenablog.com/" target="_blank"><img src="http://8arrow.org/images/hatenablog-icon.png" alt="Diary" title="Diary" width="40px" height="40px" /></a>
  </li>
  <li>
    <a href="https://twitter.com/nitro_idiot" target="_blank"><img src="http://8arrow.org/images/twitter-icon.png" alt="Twitter" title="Twitter" width= "49px" height="40px" /></a>
  </li>
</ul>
  </div>
</div>

    
      

<div class="hatena-module hatena-module-html">
  
    <div class="hatena-module-title">Website</div>
  
  <div class="hatena-module-body">
    <a href="http://8arrow.org/" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/n/nitro_idiot/20140116/20140116163928.png" alt="My Portfolio" /></a>
  </div>
</div>

    
      <div class="hatena-module hatena-module-recent-entries ">
  <div class="hatena-module-title">
    <a href="http://blog.8arrow.org/archive">
      Recent Entries
    </a>
  </div>
  <div class="hatena-module-body">
    <ul class="recent-entries hatena-urllist ">
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/04/16/233941" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">軽量なCommon LispのDBライブラリ「datafly」を作りました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/03/02/172920" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">株式会社はてなを退職しました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/02/04/041417" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/01/24/075236" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">Lisp Meet Up #13 に参加しました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/01/22/184258" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">新しいCommon Lisp方言「CL21」を作ったので意見を募集します        </a>
        

              </div>
    </li>
  
</ul>

  </div>
</div>

    
      

<div class="hatena-module hatena-module-archive">
  <div class="hatena-module-title">
    <a href="http://blog.8arrow.org/archive">Archive</a>
  </div>
  <div class="hatena-module-body">
  </div>
</div>

    
      <div class="hatena-module hatena-module-search-box">
  <div class="hatena-module-title">
    Search
  </div>
  <div class="hatena-module-body">
    <form class="search-form" role="search" action="http://blog.8arrow.org/search" method="get">
      <input type="text" name="q" class="search-module-input" value="" placeholder="ブログ内検索" required>
      <input type="submit" value="検索" class="search-module-button" />
    </form>
  </div>
</div>

    
      

<div class="hatena-module hatena-module-circles">
  <div class="hatena-module-title">
    Groups
  </div>
  <div class="hatena-module-body">
    <ul class="circle-list">
      
        <li title="Lisp" data-circle-id="12921228815713769536" data-circle-mtime="1393426757">
  <a href="http://hatenablog.com/g/12921228815713769536"><img class="circle-image" src="http://cdn.image.st-hatena.com/image/square/66f5d18c388e0cb1d804be358c6cfb48df174304/height=96;version=1;width=96/http%3A%2F%2Fcdn.mogile.archive.st-hatena.com%2Fv1%2Fimage%2Fnitro_idiot%2F297785937330261174.png" alt="Lisp" title="Lisp"></a></li>
      
    </ul>
  </div>
</div>

    
    
  </div>
</aside>

  </div>
</div>






        
      </div>
    </div>

    
      <footer id="footer" data-brand="hatenablog">
  <div id="footer-inner">
    <address>
      
      <a href="http://blog.8arrow.org/about"><img src="http://cdn1.www.st-hatena.com/users/ni/nitro_idiot/profile.gif" width="16" height="16" alt=""/>
        <span data-load-nickname="1" data-user-name="nitro_idiot">nitro_idiot</span>
      </a>
    </address>
    <p class="services"><a href="http://hatenablog.com/">Hatena Blog</a> / <a href="http://d.hatena.ne.jp/">Hatena::Diary</a></p>
  </div>
</footer>

    

    

    
      <script src="http://s.hatena.ne.jp/js/HatenaStar.js"></script>
    

    <script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js">
  {"parsetags": "explicit"}
</script>
<script type="text/javascript" src="http://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>


<script type="text/javascript" src="http://hatenablog.com/js?version=cb3376f552692eef52655312928aaadd"></script>

<script type="text/javascript" src="http://hatenablog.com/js/texts-ja.js?version=cb3376f552692eef52655312928aaadd"></script>


  <script type="text/javascript">Hatena.Diary.loadGlobalHeader()</script>





    
       <script id="google-analytics-script" type="text/javascript">
var _gaq = _gaq || [];

(function($){

  // 現在のドメイン
  
    
    
      
      var current_domain = "blog.8arrow.org".split(":")[0];
    
  

  

  

   
   _gaq.push(['all._setAccount', 'UA-7855606-1']);
   _gaq.push(['all._setDomainName', current_domain]);
   _gaq.push(['all._setSampleRate', '10']);
   _gaq.push(['all._trackPageview']);

  
    _gaq.push(['a._setAccount', 'UA-29716941-5']);
    _gaq.push(['a._setDomainName', current_domain]);
    _gaq.push(['a._setCustomVar', 1, 'PageId', document.documentElement.getAttribute('data-page'), 3 /* page-level */]);
      var keywordCampaigns = [];
      $('.js-entry-article').each(function (index, element) {
        var keywords = $(element).data('keywordCampaign').split(' ');
        keywords = _.filter(keywords, function (keyword) { return keyword.length > 0 });
        keywordCampaigns = keywordCampaigns.concat(keywords);
      });
      if (keywordCampaigns.length > 0) {
        _gaq.push(['a._setCustomVar', 3, 'KeywordCampaign', keywordCampaigns[0], 3 /* page-level */]);
      }
      _gaq.push(['a._trackPageview']);
  
    _gaq.push(['b._setAccount', 'UA-29716941-2']);
    _gaq.push(['b._setDomainName', current_domain]);
    _gaq.push(['b._setCustomVar', 1, 'PageId', document.documentElement.getAttribute('data-page'), 3 /* page-level */]);
      var keywordCampaigns = [];
      $('.js-entry-article').each(function (index, element) {
        var keywords = $(element).data('keywordCampaign').split(' ');
        keywords = _.filter(keywords, function (keyword) { return keyword.length > 0 });
        keywordCampaigns = keywordCampaigns.concat(keywords);
      });
      if (keywordCampaigns.length > 0) {
        _gaq.push(['b._setCustomVar', 3, 'KeywordCampaign', keywordCampaigns[0], 3 /* page-level */]);
      }
      _gaq.push(['b._trackPageview']);
  

  $(function () {
      $(document).delegate('[data-track-event="click"]', 'click', function () {
          
          _gaq.push([ 'a._trackEvent', 'Blogs', 'Click', this.getAttribute('data-track-key') ]);
          
          _gaq.push([ 'b._trackEvent', 'Blogs', 'Click', this.getAttribute('data-track-key') ]);
          
      });
  });

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  var available_domains = ["blog.hatena.ne.jp"];
  
    available_domains.push("hatenablog.com".split(":")[0]);
  
    available_domains.push("hatenablog.jp".split(":")[0]);
  
    available_domains.push("hateblo.jp".split(":")[0]);
  
    available_domains.push("hatenadiary.com".split(":")[0]);
  
    available_domains.push("hatenadiary.jp".split(":")[0]);
  
  $('a').on('click', function() {
    // 同じドメインならスキップ
    if ( !this.hostname || this.hostname.indexOf(current_domain) != -1 ) return;

    var cross_domain = false;
    for (var i = 0, len = available_domains.length; i < len; i++) {
      if (this.hostname.indexOf(available_domains[i]) != -1) cross_domain = true;
    }
    if ( cross_domain ) {
      
      _gaq.push(['a._link', this.href]);
      
      _gaq.push(['b._link', this.href]);
      
    }
  });

})(jQuery);
</script>

       
  <script id="hatena-counter-script" type="text/javascript"><!--
      hatena_counter_name = "nitro_idiot";
      hatena_counter_id = "104";
      hatena_counter_ref = document.referrer+"";
      hatena_counter_screen = screen.width + "x" + screen.height+","+screen.colorDepth;
  //--></script>
  <script type="text/javascript" src="http://counter.hatena.ne.jp/js/counter.js"></script>
  <noscript><img src="http://counter.hatena.ne.jp/nitro_idiot/104" border="0" alt="counter"></noscript>


    

  </body>
</html>

