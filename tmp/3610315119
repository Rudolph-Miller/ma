 <!DOCTYPE html>
<html
  lang="ja"
  data-avail-langs="ja en"

  data-page="entry"
  data-admin-domain="http://blog.hatena.ne.jp"
  data-static-domain="http://hatenablog.com"
  data-blog="8arrow.hatenablog.com"
  data-blogs-uri-base="http://blog.8arrow.org"
  data-globalheader-color="b"
  data-globalheader-type="pc"
  data-author="nitro_idiot"
  data-version="cb3376f552692eef52655312928aaadd"
  data-blog-comments-top-is-new=""
  data-device="pc"

  

  data-brand="hatenablog"


  data-has-touch-view="1"
  

  itemscope
   itemtype="http://schema.org/Article"

  >
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# article: http://ogp.me/ns/article#">
    
    
    

    <meta charset="utf-8"/>
    <meta http-equiv="X-UA-Compatible" content="IE=7; IE=9; IE=10; IE=11" />
    <title>軽量なCommon LispのDBライブラリ「datafly」を作りました - 八発白中</title>

    

    
      <link rel="canonical" href="http://blog.8arrow.org/entry/2014/04/16/233941"/>
    

    <meta itemprop="name" content="軽量なCommon LispのDBライブラリ「datafly」を作りました - 八発白中"/>
    
      <meta itemprop="image" content="http://cdn-ak.f.st-hatena.com/images/fotolife/n/nitro_idiot/20140416/20140416214333.png"/>
    

    <meta property="og:title" content="軽量なCommon LispのDBライブラリ「datafly」を作りました - 八発白中"/>
    <meta property="og:type" content="article"/>
    <meta property="og:url" content="http://blog.8arrow.org/entry/2014/04/16/233941"/>
    
      <meta property="og:image" content="http://cdn-ak.f.st-hatena.com/images/fotolife/n/nitro_idiot/20140416/20140416214333.png"/>
    
      <meta property="og:description" content=" Common Lispのデータベースライブラリというか、O/Rマッパーとしては3ヶ月前に僕が作ったIntegralがあります。 IntegralはCLOSやMOPなどのCommon Lispの魔術を余すこと無く使い、拡張性や高度なマイグレーション機能もあるライブラリとして他の追随を許しません。 ただ、すべてのアプリケーションでO/Rマッパーのような機能が必要なわけではないでしょう。抽象化レイヤーを薄く保って、極力コントローラブルにしたいという要望もあります。 今回紹介する「datafly」はそういった要求を満たす軽量なDBライブラリです。 dataflyの思想 一般的なO/Rマッパーでは、デ…" />
    <meta property="og:site_name" content="http://blog.8arrow.org/"/>
      <meta property="article:published_time" content="1397659181" />
    <meta name="twitter:card" content="summary" />      <meta name="twitter:app:name:iphone" content="はてなブログアプリ" />
      <meta name="twitter:app:id:iphone" content="583299321" />
      <meta name="twitter:app:url:iphone" content="hatenablog:///open?uri=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F04%2F16%2F233941" />      <meta name="twitter:site" content="@nitro_idiot" />
      <meta name="description" content=" Common Lispのデータベースライブラリというか、O/Rマッパーとしては3ヶ月前に僕が作ったIntegralがあります。 IntegralはCLOSやMOPなどのCommon Lispの魔術を余すこと無く使い、拡張性や高度なマイグレーション機能もあるライブラリとして他の追随を許しません。 ただ、すべてのアプリケ…">
    
<script type="text/javascript">
// <!--

if (~navigator.userAgent.indexOf('Mac OS X')) {
  document.write('<style type="text/css">html, body { font-family: \x27Helvetica\x27, \x27Arial\x27, \x27ヒラギノ角ゴ Pro W3\x27, \x27Hiragino Kaku Gothic Pro\x27, sans-serif; } </style>');
} else {
  document.write('<style type="text/css">html, body { font-family: \x27Helvetica\x27, \x27Arial\x27, \x27メイリオ\x27, \x27Meiryo\x27, \x27MS PGothic\x27, sans-serif; } </style>');
}

// -->
</script>

<!--[if lt IE 9]>
<script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"></script>
<![endif]-->

<!--[if IE]>
<script type="text/javascript" src="/js/vendor/excanvas/excanvas.js"></script>
<![endif]-->


    <link rel="shortcut icon" href="http://hatenablog.com/images/favicon.ico">
    <link rel="alternate" type="application/atom+xml" title="Atom" href="http://blog.8arrow.org/feed"/>
    <link rel="alternate" type="application/rss+xml" title="RSS2.0" href="http://blog.8arrow.org/rss"/>
    <link rel="author" href="http://www.hatena.ne.jp/nitro_idiot/">

      <link rel="stylesheet" type="text/css" href="http://hatenablog.com/.shared.css:cb3376f552692eef52655312928aaadd:/css/theme/base.css,/css/prettify.css,/css/globalheader.css?version=cb3376f552692eef52655312928aaadd"/>
      <link rel="stylesheet" type="text/css" href="http://hatenablog.com/-/blog_style/11696248318755958219/2975e7304776ac8a3369afb4a91fb32250c7e04b"/>    <script>    </script>

    
    <style>
      div#google_afc_user,
      div#google_afc_user_container,
      div.google_afc_image,
      div.google_afc_blocklink {
          display: block !important;
      }
    </style>

    
  </head>

  <body class="page-entry     ">
    <!-- Google Universal Analytics -->
<script>
  (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

  ga('create', 'UA-29716941-6', 'auto', {'name': 'HatenaBlogTracker'});
  ga('HatenaBlogTracker.require', 'displayfeatures');
  ga('HatenaBlogTracker.send', 'pageview');

</script>
<!-- End Google Universal Analytics -->

    
    <div id="header-container">
     <div id="sp-suggest" style="display: none;"><a id="sp-suggest-link" href="#">スマートフォン用の表示で見る</a></div>
    </div>

    <div class="select_star_button_container" style="display: none;">
      <img src="http://hatenablog.com/images/theme/hatena-star-quote-box.png?version=cb3376f552692eef52655312928aaadd" title="引用スターをつける" class="select_star_button" />
      <img src="http://hatenablog.com/images/theme/hatena-star-quote-star.png?version=cb3376f552692eef52655312928aaadd" title="引用スターをつける" class="select_star_button select_star_star">
    </div>

    <div class="message-box" id="select-star-message-box" style="display: none;">
      スターをつけました
    </div>

    <div id="globalheader-container" >
  <iframe id="globalheader" height="37" frameborder="0" allowTransparency="true"></iframe>
</div>


    <div id="container">
      <div id="container-inner">
        <header id="blog-title" data-brand="hatenablog">
  <div id="blog-title-inner" >
    <h1 id="title"><a href="http://blog.8arrow.org/">八発白中</a></h1>
    
      <h2 id="blog-description">はてなブログに引越しました。</h2>
    
  </div>
</header>

        
        




<div id="content" class="hfeed"
  
  >
  <div id="content-inner">
    <div id="wrapper">
      <div id="main">
        <div id="main-inner">
          
            
            <!-- google_ad_section_start -->
            <!-- rakuten_ad_target_begin -->
            
              
                <article class="entry hentry js-entry-article date-first autopagerize_page_element chars-4800 words-400 mode-markdown entry-odd" id="entry-12921228815722104429" data-keyword-campaign="" data-uuid="12921228815722104429">
  <div class="entry-inner">
    <header class="entry-header">
      <div class="date first">
        <a href="http://blog.8arrow.org/entries/2014/04/16" rel="nofollow">
          <time pubdate datetime="2014-04-16T14:39:41Z" title="2014-04-16T14:39:41Z">
            <span class="date-year">2014</span><span class="hyphen">-</span><span class="date-month">04</span><span class="hyphen">-</span><span class="date-day">16</span>
          </time>
        </a>
      </div>
      <h1 class="entry-title">
        <a href="http://blog.8arrow.org/entry/2014/04/16/233941" class="entry-title-link bookmark">軽量なCommon LispのDBライブラリ「datafly」を作りました</a>
      </h1>
      
      <div class="categories no-categories">
        
      </div>
      
    </header>
    <div class="entry-content">

      
        <p><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/n/nitro_idiot/20140416/20140416214333.png"></p>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>のデータベースライブラリというか、O/Rマッパーとしては<a href="http://blog.8arrow.org/entry/2014/01/19/180013">3ヶ月前に僕が作ったIntegral</a>があります。</p>

<p>IntegralはCLOSやMOPなどの<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>の魔術を余すこと無く使い、拡張性や高度な<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>機能もあるライブラリとして他の追随を許しません。</p>

<p>ただ、すべてのアプリケーションでO/Rマッパーのような機能が必要なわけではないでしょう。抽象化レイヤーを薄く保って、極力コントローラブルにしたいという要望もあります。</p>

<p>今回紹介する「datafly」はそういった要求を満たす軽量なDBライブラリです。</p>

<h2>dataflyの思想</h2>

<p>一般的なO/Rマッパーでは、データベースの「テーブル」と、プログラム言語の「クラス定義」が一対一対応しています。この大きな前提のおかげでデータベースを抽象化でき、まるでクラス定義が(半)永続化しているように錯覚させてくれます。</p>

<p>ただし、そこには<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ</a>があります。</p>

<p>O/Rマッパーはその<a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%AD%BC%C1">性質</a>上データベースや<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>発行を表向き見えなくするものなので、コストのかかる<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>発行が行われているときに気づきづらくなります。</p>

<p>その点、dataflyは逆の思想に基づいています。</p>

<p>dataflyでは暗黙の<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>の発行を行いません。マクロを除く黒魔術は使いません。透明性を重視し、アプリケーションごとの最適化を行いやすくコントローラブルな状態に保ちます。</p>

<h2>機能</h2>

<p>上述の通り、dataflyはO/Rマッパーではありません。たとえば、dataflyは以下のようなことはしません。</p>

<ul>
<li>クラス定義からDB<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE">スキーマ</a>の生成はしません。</li>
<li>DB<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE">スキーマ</a>からクラス定義の生成もしません。</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス</a>の変更を感知してUPDATE/DELETE文を発行する機能はありません。</li>
<li><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%A4%A5%B0%A5%EC%A1%BC%A5%B7%A5%E7%A5%F3">マイグレーション</a>機能はありません。</li>
</ul>


<p>dataflyがやるのはこんなことです。</p>

<ul>
<li>DBコネクション管理</li>
<li>CL-<a class="keyword" href="http://d.hatena.ne.jp/keyword/DBI">DBI</a>をラップして扱いやすく</li>
<li>結果を構造体(Structure)に<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a></li>
<li>inflate</li>
</ul>


<p>CLOSの標準クラスではなく構造体を使うのでいくらか効率も良いはずです。</p>

<h2>クイックスタート</h2>

<h3>構造体(Structure)への<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a></h3>

<p>dataflyでは<a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL</a>の発行方法として<code>retrieve-one</code>、<code>retrieve-all</code>、<code>execute</code>の3つの関数があります。すべて引数として<a href="https://github.com/fukamachi/sxql">SxQL</a>のクエリオブジェクトを受け取ります。</p>

<p>たとえば、SELECT文を投げて、結果を1つ返して欲しいときは<code>retrieve-one</code>を使います。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span>retrieve-one
  <span class="synSpecial">(</span>select :*
    <span class="synSpecial">(</span>from :user<span class="synSpecial">)</span>
    <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= <span class="synType">:name</span> <span class="synConstant">&quot;nitro_idiot&quot;</span><span class="synSpecial">))))</span>
<span class="synComment">;=&gt; (:ID 1 :NAME &quot;nitro_idiot&quot; :EMAIL &quot;nitro_idiot@example.com&quot; :REGISTERED-AT &quot;2014-04-14T19:20:13&quot;)</span>
</pre>


<p>返り値はプロパティリストです。</p>

<p>キーワード引数の<code>:as</code>を指定すると、結果を指定した構造体(Structure)として返します。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defstruct</span> <span class="synStatement">user</span>
  id
  name
  email
  registered-at<span class="synSpecial">)</span>

<span class="synSpecial">(</span>retrieve-one
  <span class="synSpecial">(</span>select :*
    <span class="synSpecial">(</span>from :user<span class="synSpecial">)</span>
    <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= <span class="synType">:name</span> <span class="synConstant">&quot;nitro_idiot&quot;</span><span class="synSpecial">)))</span>
  :as <span class="synSpecial">'</span><span class="synIdentifier">user</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; #S(USER :ID 1 :NAME &quot;nitro_idiot&quot; :EMAIL &quot;nitro_idiot@example.com&quot; :REGISTERED-AT &quot;2014-04-14T19:20:13&quot;)</span>

<span class="synSpecial">(</span>user-name <span class="synStatement">*</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; &quot;nitro_idiot&quot;</span>
</pre>


<p>この例ではテーブル名と構造体の名前が同じですが、同じである必要は全くありません。dataflyはテーブルとクラスが一対一対応ではないからです。</p>

<p>この自由さは、架空のテーブル――たとえばJOINした結果――などを構造体として扱いたいときなんかに便利です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synComment">;; &quot;user_bank&quot;という名前のテーブルは存在しない。</span>
<span class="synSpecial">(</span><span class="synStatement">defstruct</span> user-bank
  user-id
  name
  bank-balance<span class="synSpecial">)</span>

<span class="synSpecial">(</span>retrieve-one
  <span class="synSpecial">(</span>select <span class="synSpecial">(</span>:user_id
           <span class="synType">:name</span>
           <span class="synSpecial">(</span>:as <span class="synSpecial">(</span><span class="synType">:sum</span> <span class="synSpecial">(</span>:amount<span class="synSpecial">))</span>
                :bank_balance<span class="synSpecial">))</span>
    <span class="synSpecial">(</span>from :user<span class="synSpecial">)</span>
    <span class="synSpecial">(</span>left-join :bank_transactions <span class="synType">:on</span> <span class="synSpecial">(</span>:= :user.id :bank_transactions.user_id<span class="synSpecial">))</span>
    <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= <span class="synType">:name</span> <span class="synConstant">&quot;nitro_idiot&quot;</span><span class="synSpecial">)))</span>
  :as <span class="synSpecial">'</span><span class="synIdentifier">user-bank</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; #S(USER-BANK :USER-ID 1 :NAME &quot;nitro_idiot&quot; :BANK-BALANCE 200000)</span>
</pre>


<p>いずれの例でも、結果として返ってきた構造体オブジェクトに<code>setf</code>で変更を加えてもO/Rマッパーのようにデータベースに更新処理が行えるわけではありません。あくまでデータベースから構造体への一方向の<a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング</a>だけを行います。</p>

<h3>モデル定義としての構造体</h3>

<p>少しずつ複雑な例を紹介していきます。</p>

<p>上の例では単なる<a class="keyword" href="http://d.hatena.ne.jp/keyword/Common%20Lisp">Common Lisp</a>の構造体を使いました。</p>

<p>これだけで十分な方も多いかもしれませんが、dataflyでは少し変わった構造体を定義する機能もあります。</p>

<p>使い方は簡単です。<code>defstruct</code>の代わりに<code>defmodel</code>というマクロを使います。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span>defmodel <span class="synStatement">user</span>
  id
  name
  email
  registered-at<span class="synSpecial">)</span>
</pre>


<p><a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%CE%A5%C6%A1%BC%A5%B7%A5%E7%A5%F3">アノテーション</a>ライブラリの<a href="https://github.com/arielnetworks/cl-annot">cl-annot</a>を使うと<code>@model</code>と書くこともできます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span>annot:enable-annot-syntax<span class="synSpecial">)</span>

@model
<span class="synSpecial">(</span><span class="synStatement">defstruct</span> <span class="synStatement">user</span>
  id
  name
  email
  registered-at<span class="synSpecial">)</span>
</pre>


<p>以下では<code>@model</code>を使うものとします。</p>

<h3>inflate</h3>

<p><code>@model</code>をつけると構造体定義にいくつかの特殊なオプションをつけることができます。</p>

<p>その一つが<code>:inflate</code>です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink>@model
<span class="synSpecial">(</span><span class="synStatement">defstruct</span> <span class="synSpecial">(</span><span class="synStatement">user</span> <span class="synSpecial">(</span>:inflate registered-at <span class="synType">#'datetime-to-timestamp</span><span class="synSpecial">))</span>
  id
  name
  email
  registered-at<span class="synSpecial">)</span>
</pre>


<p><code>(:inflate &lt;カラム&gt; &lt;関数&gt;)</code>を記述すると、オブジェクトを作るときに指定した<code>&lt;カラム&gt;</code>の値に<code>&lt;関数&gt;</code>を自動適用します。この例では<code>registered-at</code>というカラムをLOCAL-TIMEのTIMESTAMPオブジェクトに変換します。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defvar</span> <span class="synType">*user*</span>
  <span class="synSpecial">(</span>retrieve-one
    <span class="synSpecial">(</span>select :*
      <span class="synSpecial">(</span>from :user<span class="synSpecial">)</span>
      <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= <span class="synType">:name</span> <span class="synConstant">&quot;nitro_idiot&quot;</span><span class="synSpecial">)))</span>
    :as <span class="synSpecial">'</span><span class="synIdentifier">user</span><span class="synSpecial">))</span>

<span class="synComment">;; Returns a local-time:timestamp.</span>
<span class="synSpecial">(</span>user-registered-at <span class="synType">*user*</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; @2014-04-15T04:20:13.000000+09:00</span>
</pre>


<p><code>:inflate</code>は複数つけることもできます。また、<code>&lt;カラム&gt;</code>の部分をリストにして複数のカラムを指定することもできます。</p>

<p>オブジェクトからデータベースにINSERT/UPDATE/DELETE文を発行する機能は無いので、反対の<code>:deflate</code>はありません。</p>

<h3>:has-a と :has-many</h3>

<p>他に指定できるオプションとして<code>:has-a</code>と<code>:has-many</code>があります。これらはテーブルのカラムの関係性を定義することで、構造体にアクセサを追加する機能です。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink>@model
<span class="synSpecial">(</span><span class="synStatement">defstruct</span> <span class="synSpecial">(</span><span class="synStatement">user</span> <span class="synSpecial">(</span>:inflate registered-at <span class="synType">#'datetime-to-timestamp</span><span class="synSpecial">)</span>
                 <span class="synSpecial">(</span>:has-a config <span class="synSpecial">(</span>select :* <span class="synSpecial">(</span>from :config<span class="synSpecial">)</span> <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= :user_id id<span class="synSpecial">))))</span>
                 <span class="synSpecial">(</span>:has-many <span class="synSpecial">(</span>tweets tweet<span class="synSpecial">)</span>
                  <span class="synSpecial">(</span>select :*
                    <span class="synSpecial">(</span>from :tweet<span class="synSpecial">)</span>
                    <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= :user_id id<span class="synSpecial">))</span>
                    <span class="synSpecial">(</span>order-by <span class="synSpecial">(</span>:desc :created_at<span class="synSpecial">)))))</span>
  id
  name
  email
  registered-at<span class="synSpecial">)</span>

<span class="synSpecial">(</span><span class="synStatement">defstruct</span> config
  id
  user-id
  timezone
  country
  language<span class="synSpecial">)</span>

<span class="synSpecial">(</span><span class="synStatement">defstruct</span> tweet
  id
  user-id
  body
  created-at<span class="synSpecial">)</span>
</pre>


<p>この例では<code>user-config</code>と<code>user-tweets</code>というアクセサが自動で定義されます。</p>

<pre class="code lang-lisp" data-lang="lisp" data-unlink><span class="synSpecial">(</span><span class="synStatement">defvar</span> <span class="synType">*user*</span>
  <span class="synSpecial">(</span>retrieve-one
    <span class="synSpecial">(</span>select :*
      <span class="synSpecial">(</span>from :user<span class="synSpecial">)</span>
      <span class="synSpecial">(</span>where <span class="synSpecial">(</span>:= <span class="synType">:name</span> <span class="synConstant">&quot;nitro_idiot&quot;</span><span class="synSpecial">)))</span>
    :as <span class="synSpecial">'</span><span class="synIdentifier">user</span><span class="synSpecial">))</span>

<span class="synSpecial">(</span>user-config <span class="synType">*user*</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; #S(CONFIG :ID 4 :USER-ID 1 :TIMEZONE &quot;JST&quot; :COUNTRY &quot;jp&quot; :LANGUAGE &quot;ja&quot;)</span>

<span class="synSpecial">(</span>user-tweets <span class="synType">*user*</span><span class="synSpecial">)</span>
<span class="synComment">;=&gt; (#S(TWEET :ID 2 :USER-ID 1 :BODY &quot;Is it working?&quot; :CREATED-AT @2014-04-16T11:02:31.000000+09:00)</span>
<span class="synComment">;    #S(TWEET :ID 1 :USER-ID 1 :BODY &quot;Hi.&quot; :CREATED-AT @2014-04-15T18:58:20.000000+09:00))</span>
</pre>


<p><code>:has-a</code>や<code>:has-many</code>で定義されたアクセサを呼び出すとSELECT文が発行されることに注意してください。</p>

<p>結果は初回でキャッシュされるので、二度以上呼び出しても何回もクエリが発行されるわけではないので安心してください。キャッシュを消すには<code>clear-object-caches</code>が使えます。</p>

<h2>おわりに</h2>

<p>Integralと違ってブログポスト一つでほとんどの機能が紹介できてしまった。<a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON</a>吐くだけのWeb <a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API</a>サーバとかならこの程度で十分ですね。</p>

<p>今回作ったdataflyは<a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub</a>で公開しています。</p>

<ul>
<li><a href="https://github.com/fukamachi/datafly">GitHubでdataflyのリポジトリを見る</a></li>
</ul>


<p>また、来週の火曜の夜は渋谷で<a class="keyword" href="http://d.hatena.ne.jp/keyword/Lisp">Lisp</a> Meetupがあります。興味がある方はどうぞご参加ください。</p>

<blockquote><p><a href="http://atnd.org/events/49370">Lisp Meet Up presented by Shibuya.lisp #16 : ATND</a><br>
日時: 4/22(火) 19:30 〜 21:30<br>
場所: <a class="keyword" href="http://d.hatena.ne.jp/keyword/%BD%C2%C3%AB%A5%DE%A1%BC%A5%AF%A5%B7%A5%C6%A5%A3">渋谷マークシティ</a> ウエスト13階 セミナールーム</p></blockquote>

<h2>参考</h2>

<ul>
<li><a href="https://github.com/fukamachi/sxql">SxQL</a></li>
<li><a href="https://github.com/fukamachi/cl-dbi">CL-DBI</a></li>
<li><a href="https://github.com/arielnetworks/cl-annot">cl-annot</a>, <a href="https://github.com/m2ym/cl-syntax">CL-SYNTAX</a></li>
<li><a href="https://github.com/AccelerationNet/function-cache">function-cache</a></li>
</ul>


      
    </div>
    <footer class="entry-footer">
      <p class="entry-footer-section">
        <span class="author vcard"><span class="fn" data-load-nickname="1" data-user-name="nitro_idiot">nitro_idiot</span></span>
        <span class="entry-footer-time"><a href="http://blog.8arrow.org/entry/2014/04/16/233941"><time data-relative datetime="2014-04-16T14:39:41Z" title="2014-04-16T14:39:41Z" pubdate class="updated">2014-04-16 23:39</time></a></span>
      </p>
      <div class="hatena-star-container">
      </div>
      

      <div class="customized-footer">
        <div class="social-buttons">
  
  
    <a href="http://b.hatena.ne.jp/entry/http://blog.8arrow.org/entry/2014/04/16/233941" class="hatena-bookmark-button" data-hatena-bookmark-layout="standard-balloon" data-hatena-bookmark-lang="ja" title="この記事をはてなブックマークに追加"><img src="http://b.st-hatena.com/images/entry-button/button-only.gif" alt="この記事をはてなブックマークに追加" width="20" height="20" style="border: none;" /></a>
  
  
    <iframe src="http://www.facebook.com/plugins/like.php?href=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F04%2F16%2F233941&amp;layout=button_count&amp;show_faces=false&amp;width=130&amp;action=like&amp;height=21" class="facebook-like-button" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:130px; height:21px;" allowTransparency="true"></iframe>
  
  
    <iframe allowtransparency="true" frameborder="0" scrolling="no" src="https://platform.twitter.com/widgets/tweet_button.html?url=http%3A%2F%2Fblog.8arrow.org%2Fentry%2F2014%2F04%2F16%2F233941&text=%E8%BB%BD%E9%87%8F%E3%81%AACommon%20Lisp%E3%81%AEDB%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E3%80%8Cdatafly%E3%80%8D%E3%82%92%E4%BD%9C%E3%82%8A%E3%81%BE%E3%81%97%E3%81%9F%20-%20%E5%85%AB%E7%99%BA%E7%99%BD%E4%B8%AD&lang=ja" class="twitter-share-button" style="width:130px; height:20px;"></iframe>
  
  
    <div class="g-plusone" data-size="medium" data-href="http://blog.8arrow.org/entry/2014/04/16/233941"></div>
  
  
  
  
</div>


          

          

          
            <div class="entry-footer-html">    <!-- X:S ZenBackWidget --><script type="text/javascript">document.write(unescape("%3Cscript")+" src='http://widget.zenback.jp/?base_uri=http%3A//blog.8arrow.org&nsid=116589683810521419%3A%3A116589712801563571&rand="+Math.ceil((new Date()*1)*Math.random())+"' type='text/javascript'"+unescape("%3E%3C/script%3E"));</script><!-- X:E ZenBackWidget --></div>
          
        
      </div>

      <div class="comment-box">
        
        <ul class="comment">
          
        </ul>
        
          <a class="leave-comment-title">コメントを書く</a>
        
      </div>
    </footer>
  </div>
</article>

                

                
                  
                  
                  <div class="permalink pager">
                    
                    
                      
                      <span class="pager-next">
                        <a href="http://blog.8arrow.org/entry/2014/03/02/172920" rel="next">
                          株式会社はてなを退職しました
                          <span class="pager-arrow"> »</span>
                        </a>
                      </span>
                    
                  </div>
                

              
            
            <!-- rakuten_ad_target_end -->
            <!-- google_ad_section_end -->

            
          
        </div>
      </div>

      
      <aside id="box1">
        <div id="box1-inner">
        </div>
      </aside>

    </div><!-- #wrapper -->

    <aside id="box2">
  <div id="box2-inner">
    
      

<div class="hatena-module hatena-module-profile">
  <div class="hatena-module-title">
    About Me
  </div>
  <div class="hatena-module-body">
    
    <a href="http://blog.8arrow.org/about">
      <img src="http://cdn1.www.st-hatena.com/users/ni/nitro_idiot/profile.gif"
      alt="id:nitro_idiot" class="profile-icon" />
    </a>
    

    
    <span class="id">
      <a href="http://blog.8arrow.org/about"><span data-load-nickname="1" data-user-name="nitro_idiot">id:nitro_idiot</span></a>
      
  
    
      
      <a href="http://blog.hatena.ne.jp/guide/pro" title="はてなブログPro"><i class="icon-pro" /></i></a>
    
  


    </span>
    

    

    
    <div class="hatena-follow-button-box btn-subscribe">
      <a href="#" class="hatena-follow-button">
        <span class="subscribing">
          <span class="foreground">購読中です</span>
          <span class="background">読者をやめる</span>
        </span>
        <span class="unsubscribing">
          <span class="foreground">読者になる</span>
          <span class="background">読者になる</span>
        </span>
      </a>
      <div class="subscription-count-box">
        <span class="subscription-balloon">
        </span>
        <span class="subscription-count">
        </span>
      </div>
    </div>
    

    

    

    
  </div>
</div>

    
      

<div class="hatena-module hatena-module-html">
  
  <div class="hatena-module-body">
    <style type="text/css">
.my-service-icons {
  padding-left: 0;
  text-align: center;
}
.my-service-icons li {
  display: inline-block;
  margin: 0 8px;
}
</style>
<ul class="my-service-icons" >
  <li>
    <a href="https://github.com/fukamachi" target="_blank"><img src="http://8arrow.org/images/github-icon.png" alt="GitHub" title="GitHub" width="40px" height="40px" /></a>
  </li>
  <li>
    <a href="http://nitro-idiot.hatenablog.com/" target="_blank"><img src="http://8arrow.org/images/hatenablog-icon.png" alt="Diary" title="Diary" width="40px" height="40px" /></a>
  </li>
  <li>
    <a href="https://twitter.com/nitro_idiot" target="_blank"><img src="http://8arrow.org/images/twitter-icon.png" alt="Twitter" title="Twitter" width= "49px" height="40px" /></a>
  </li>
</ul>
  </div>
</div>

    
      

<div class="hatena-module hatena-module-html">
  
    <div class="hatena-module-title">Website</div>
  
  <div class="hatena-module-body">
    <a href="http://8arrow.org/" target="_blank"><img src="http://cdn-ak.f.st-hatena.com/images/fotolife/n/nitro_idiot/20140116/20140116163928.png" alt="My Portfolio" /></a>
  </div>
</div>

    
      <div class="hatena-module hatena-module-recent-entries ">
  <div class="hatena-module-title">
    <a href="http://blog.8arrow.org/archive">
      Recent Entries
    </a>
  </div>
  <div class="hatena-module-body">
    <ul class="recent-entries hatena-urllist ">
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/04/16/233941" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">軽量なCommon LispのDBライブラリ「datafly」を作りました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/03/02/172920" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">株式会社はてなを退職しました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/02/04/041417" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">誰向けかわからないCommon Lispでの関数型プログラミング入門とその未来        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/01/24/075236" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">Lisp Meet Up #13 に参加しました        </a>
        

              </div>
    </li>
  
    
    <li class="urllist-item recent-entries-item">
      <div class="urllist-item-inner recent-entries-item-inner">
        
        
        <a href="http://blog.8arrow.org/entry/2014/01/22/184258" class="urllist-title-link recent-entries-title-link          urllist-title recent-entries-title        ">新しいCommon Lisp方言「CL21」を作ったので意見を募集します        </a>
        

              </div>
    </li>
  
</ul>

  </div>
</div>

    
      

<div class="hatena-module hatena-module-archive">
  <div class="hatena-module-title">
    <a href="http://blog.8arrow.org/archive">Archive</a>
  </div>
  <div class="hatena-module-body">
  </div>
</div>

    
      <div class="hatena-module hatena-module-search-box">
  <div class="hatena-module-title">
    Search
  </div>
  <div class="hatena-module-body">
    <form class="search-form" role="search" action="http://blog.8arrow.org/search" method="get">
      <input type="text" name="q" class="search-module-input" value="" placeholder="ブログ内検索" required>
      <input type="submit" value="検索" class="search-module-button" />
    </form>
  </div>
</div>

    
      

<div class="hatena-module hatena-module-circles">
  <div class="hatena-module-title">
    Groups
  </div>
  <div class="hatena-module-body">
    <ul class="circle-list">
      
        <li title="Lisp" data-circle-id="12921228815713769536" data-circle-mtime="1393426757">
  <a href="http://hatenablog.com/g/12921228815713769536"><img class="circle-image" src="http://cdn.image.st-hatena.com/image/square/66f5d18c388e0cb1d804be358c6cfb48df174304/height=96;version=1;width=96/http%3A%2F%2Fcdn.mogile.archive.st-hatena.com%2Fv1%2Fimage%2Fnitro_idiot%2F297785937330261174.png" alt="Lisp" title="Lisp"></a></li>
      
    </ul>
  </div>
</div>

    
    
  </div>
</aside>

  </div>
</div>






        
      </div>
    </div>

    
      <footer id="footer" data-brand="hatenablog">
  <div id="footer-inner">
    <address>
      
      <a href="http://blog.8arrow.org/about"><img src="http://cdn1.www.st-hatena.com/users/ni/nitro_idiot/profile.gif" width="16" height="16" alt=""/>
        <span data-load-nickname="1" data-user-name="nitro_idiot">nitro_idiot</span>
      </a>
    </address>
    <p class="services"><a href="http://hatenablog.com/">Hatena Blog</a> / <a href="http://d.hatena.ne.jp/">Hatena::Diary</a></p>
  </div>
</footer>

    

    

    
      <script src="http://s.hatena.ne.jp/js/HatenaStar.js"></script>
    

    <script type="text/javascript" src="http://platform.twitter.com/widgets.js"></script>
<script type="text/javascript" src="https://apis.google.com/js/plusone.js">
  {"parsetags": "explicit"}
</script>
<script type="text/javascript" src="http://b.st-hatena.com/js/bookmark_button.js" charset="utf-8" async="async"></script>


<script type="text/javascript" src="http://hatenablog.com/js?version=cb3376f552692eef52655312928aaadd"></script>

<script type="text/javascript" src="http://hatenablog.com/js/texts-ja.js?version=cb3376f552692eef52655312928aaadd"></script>


  <script type="text/javascript">Hatena.Diary.loadGlobalHeader()</script>





    
       <script id="google-analytics-script" type="text/javascript">
var _gaq = _gaq || [];

(function($){

  // 現在のドメイン
  
    
    
      
      var current_domain = "blog.8arrow.org".split(":")[0];
    
  

  

  

   
   _gaq.push(['all._setAccount', 'UA-7855606-1']);
   _gaq.push(['all._setDomainName', current_domain]);
   _gaq.push(['all._setSampleRate', '10']);
   _gaq.push(['all._trackPageview']);

  
    _gaq.push(['a._setAccount', 'UA-29716941-5']);
    _gaq.push(['a._setDomainName', current_domain]);
    _gaq.push(['a._setCustomVar', 1, 'PageId', document.documentElement.getAttribute('data-page'), 3 /* page-level */]);
      var keywordCampaigns = [];
      $('.js-entry-article').each(function (index, element) {
        var keywords = $(element).data('keywordCampaign').split(' ');
        keywords = _.filter(keywords, function (keyword) { return keyword.length > 0 });
        keywordCampaigns = keywordCampaigns.concat(keywords);
      });
      if (keywordCampaigns.length > 0) {
        _gaq.push(['a._setCustomVar', 3, 'KeywordCampaign', keywordCampaigns[0], 3 /* page-level */]);
      }
      _gaq.push(['a._trackPageview']);
  
    _gaq.push(['b._setAccount', 'UA-29716941-2']);
    _gaq.push(['b._setDomainName', current_domain]);
    _gaq.push(['b._setCustomVar', 1, 'PageId', document.documentElement.getAttribute('data-page'), 3 /* page-level */]);
      var keywordCampaigns = [];
      $('.js-entry-article').each(function (index, element) {
        var keywords = $(element).data('keywordCampaign').split(' ');
        keywords = _.filter(keywords, function (keyword) { return keyword.length > 0 });
        keywordCampaigns = keywordCampaigns.concat(keywords);
      });
      if (keywordCampaigns.length > 0) {
        _gaq.push(['b._setCustomVar', 3, 'KeywordCampaign', keywordCampaigns[0], 3 /* page-level */]);
      }
      _gaq.push(['b._trackPageview']);
  

  $(function () {
      $(document).delegate('[data-track-event="click"]', 'click', function () {
          
          _gaq.push([ 'a._trackEvent', 'Blogs', 'Click', this.getAttribute('data-track-key') ]);
          
          _gaq.push([ 'b._trackEvent', 'Blogs', 'Click', this.getAttribute('data-track-key') ]);
          
      });
  });

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

  var available_domains = ["blog.hatena.ne.jp"];
  
    available_domains.push("hatenablog.com".split(":")[0]);
  
    available_domains.push("hatenablog.jp".split(":")[0]);
  
    available_domains.push("hateblo.jp".split(":")[0]);
  
    available_domains.push("hatenadiary.com".split(":")[0]);
  
    available_domains.push("hatenadiary.jp".split(":")[0]);
  
  $('a').on('click', function() {
    // 同じドメインならスキップ
    if ( !this.hostname || this.hostname.indexOf(current_domain) != -1 ) return;

    var cross_domain = false;
    for (var i = 0, len = available_domains.length; i < len; i++) {
      if (this.hostname.indexOf(available_domains[i]) != -1) cross_domain = true;
    }
    if ( cross_domain ) {
      
      _gaq.push(['a._link', this.href]);
      
      _gaq.push(['b._link', this.href]);
      
    }
  });

})(jQuery);
</script>

       
  <script id="hatena-counter-script" type="text/javascript"><!--
      hatena_counter_name = "nitro_idiot";
      hatena_counter_id = "104";
      hatena_counter_ref = document.referrer+"";
      hatena_counter_screen = screen.width + "x" + screen.height+","+screen.colorDepth;
  //--></script>
  <script type="text/javascript" src="http://counter.hatena.ne.jp/js/counter.js"></script>
  <noscript><img src="http://counter.hatena.ne.jp/nitro_idiot/104" border="0" alt="counter"></noscript>


    

  </body>
</html>

